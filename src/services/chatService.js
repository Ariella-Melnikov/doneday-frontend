import axios from 'axios'
import { makeId } from './util.service'

const BASE_URL = 'https://api.openai.com/v1/completions'
const API_KEY = 'sk-proj-KlazichQ2l0j77H3rxTqT3BlbkFJ1mAFLXizl7TsNqKdsr7A'

export async function generateBoardFromDescription(description) {
    const prompt = `Generate a detailed single board structure in an accurate JSON format for the following project description: "${description}". 
    Only return the JSON object, nothing else. 
    Example JSON:
    {
        "title": "Example Project Board",
        "description": "An example project board generated by AI.",
        "groups": [
            {
                "title": "Some group title...",
                "style": {"backgroundColor": "rgb(255, 90, 196)"},
                "tasks": [
                    {
                        "title": "some task title...",
                        "description": "some description about how to do the task"
                    }
                ]
            }
        ]
    }`

    try {
        const response = await axios.post(
            BASE_URL,
            {
                model: 'gpt-3.5-turbo-instruct',
                prompt: prompt,
                max_tokens: 1500,
                temperature: 0.7,
                n: 1,
            },
            {
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${API_KEY}`,
                },
            }
        )

        const answer = response.data.choices[0].text.trim()
        const board = JSON.parse(answer)

        board.activities = board.activities || []
        board.archivedAt = null
        board._id = makeId()
        board.isStarred = false
        board.label = 'task'
        board.cmpsOrder = ['checkbox', 'title', 'dueDate', 'memberIds', 'files', 'priority', 'recording', 'description']
        board.members = board.members || []

        const statuses = ['Not started']
        const priorities = ['Low', 'Medium', 'High', 'Critical']

        function getRandomElement(arr) {
            return arr[Math.floor(Math.random() * arr.length)]
        }

        function getRandomDate(start, end) {
            const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))
            return date.toISOString().split('T')[0]
        }

        const startDate = new Date()
        const endDate = new Date()
        endDate.setFullYear(startDate.getFullYear() + 1)

        if (board.groups && Array.isArray(board.groups)) {
            board.groups.forEach(group => {
                group.archivedAt = null
                group._id = makeId()
                group.tasks = group.tasks || []

                group.tasks.forEach(task => {
                    task.archivedAt = null
                    task._id = makeId()
                    task.comments = task.comments || []
                    task.checklists = task.checklists || []
                    task.memberIds = task.memberIds || []
                    task.priority = getRandomElement(priorities)
                    task.status = getRandomElement(statuses)
                    task.dueDate = getRandomDate(startDate, endDate)
                    task.byMember = null
                })
            })
        }

        return board
    } catch (error) {
        console.error('Error fetching AI generated board:', error.response ? error.response.data : error.message)
        throw error
    }
}
